# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant::configure("2") do | config |
	config.vm.synced_folder ".", "/vagrant", disabled: true
	config.vm.box = "ubuntu/bionic64" # Ubuntu 18.04.1 LTS
	config.vm.hostname = "MalwareLab"
	# if you have multiple nic available, a prompt will ask you which nic has to be bound
	# this setting cannot be automated
	config.vm.network "public_network"
	config.vm.provider "virtualbox" do | v |
		v.gui = false
		v.memory = 2048
		v.cpus = 2
	end

	config.vm.provision "shell", run: "always", inline: <<-SHELL
		set -e

		# Unlock Python repo
		sed -i 's/ubuntu bionic main restricted/ubuntu bionic main universe/g' /etc/apt/sources.list
		sed -i 's/ubuntu bionic-security main restricted/ubuntu bionic-security main universe/g' /etc/apt/sources.list
		sed -i 's/ubuntu bionic-updates main restricted/ubuntu bionic-updates main universe/g' /etc/apt/sources.list

		# Add VirtualBox Sources
		echo deb http://download.virtualbox.org/virtualbox/debian xenial contrib | sudo tee -a /etc/apt/sources.list.d/virtualbox.list
		wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -

		apt -y update # TODO : remove warnings by editing /etc/apt/sources.list
		#apt -y upgrade
		#apt -y dist-upgrade

		# Install Python libraries
		apt -y install python python-pip python-dev libffi-dev libssl-dev python-virtualenv python-setuptools libjpeg-dev zlib1g-dev swig

		# In order to use the Django-based Web Interface, MongoDB is required:
		apt -y install mongodb
		
		# Install PostgreSQL as main database
		apt -y install postgresql libpq-dev

		# Install KVM
		#apt -y install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils python-libvirt

		# Install VirtualBox as main virtualization software
		apt -y install virtualbox
		# apt -y install virtualbox-ext-pack # TODO

		# Install Pydeep plugin
		apt -y install ssdeep libfuzzy-dev
		ldconfig
		pip install pydeep

		# Install mitmproxy in order to intercept SSL/TLS generated traffic
		apt -y install python3-venv
		git clone https://github.com/mitmproxy/mitmproxy.git
		cd mitmproxy
		./dev.sh
		#. venv/bin/activate
		#py.test

		# Configuring Cuckoo account
		useradd cuckoo
		#chpasswd << 'END'
		#cuckoo:cuckoo
		#END

		usermod -a -G vboxusers cuckoo

		# Install tcpdump and configura cuckoo account rights
		apt -y install tcpdump apparmor-utils
		aa-disable /usr/sbin/tcpdump # disable AppArmor for tcpdump
		groupadd pcap
		usermod -a -G pcap cuckoo
		chgrp pcap /usr/sbin/tcpdump
		setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump

		# Install Volatility
		git clone https://github.com/volatilityfoundation/volatility.git

		# Install SWIG & M2Crypto
		apt -y install swig
		pip install m2crypto

		# Install Guacamole daemon
		apt -y install libguac-client-rdp0 libguac-client-vnc0 libguac-client-ssh0 guacd

		if [ -f /var/run/reboot-required ]; then
			echo 'reboot is required'
			#echo 'rebooting...'
			#reboot
		fi
	SHELL

	config.vm.provision "shell", run: "always", inline: <<-SHELL
		cores=$(grep -c ^processor /proc/cpuinfo 2>/dev/null)
		[ "$cores" -eq "0" ] && cores=1
		threshold="${cores:-1}.0"
		if [ $(echo "`cut -f1 -d ' ' /proc/loadavg` < $threshold" | bc) -eq 1 ]; then
			echo "System information:"
			/usr/bin/landscape-sysinfo
		else
			echo "System information disabled due to load higher than $threshold"
		fi
	SHELL
end
#eof
